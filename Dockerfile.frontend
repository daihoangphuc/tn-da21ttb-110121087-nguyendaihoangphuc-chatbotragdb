# Multi-stage build cho Frontend (Next.js)
FROM node:20-alpine AS base

# Install pnpm
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# Dependencies stage
FROM base AS deps
WORKDIR /app

# Copy package files
COPY frontend/package.json ./
# Make pnpm-lock.yaml optional in case it's missing or incompatible
COPY frontend/pnpm-lock.yaml* ./

# Install dependencies with fallback for lockfile issues
RUN pnpm install --no-frozen-lockfile || pnpm install

# Build stage
FROM base AS builder
WORKDIR /app
COPY frontend/ .
COPY --from=deps /app/node_modules ./node_modules

# Đối số để nhận file env từ CI/CD
ARG ENV_FILE=.env.frontend
# Đối số để nhận URL API trực tiếp
ARG NEXT_PUBLIC_API_URL

# Copy file env từ build context
COPY ${ENV_FILE} ./.env.local

# Đảm bảo biến môi trường được thiết lập trong quá trình build
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

# Debug info
RUN echo "Building with NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}"

# Build the application
RUN pnpm build

# Production stage
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production

# Install wget for health checks
RUN apk add --no-cache wget

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

CMD ["node", "server.js"]
