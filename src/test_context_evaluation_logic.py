#!/usr/bin/env python3
"""
Test logic ƒë√°nh gi√° context quality ƒë·ªÉ x√°c ƒë·ªãnh smart fallback
"""

import os
import sys
from dotenv import load_dotenv

load_dotenv()

# Add src directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))


def test_context_evaluation_logic():
    """Test logic ƒë√°nh gi√° context quality"""
    
    print("=" * 60)
    print("TEST CONTEXT EVALUATION LOGIC")
    print("=" * 60)
    
    # Simulate context quality results
    test_cases = [
        {
            "name": "Tr∆∞·ªùng h·ª£p ban ƒë·∫ßu (Oracle question)",
            "context_quality": {
                "is_sufficient": False,
                "confidence": 0.30,
                "reason": "Th√¥ng tin ch·ªâ n√≥i chung v·ªÅ DBMS v√† SQL Server, kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ v·ªÅ Oracle"
            },
            "threshold": 0.20,
            "expected_fallback": True,
            "old_logic_result": False,  # Logic c≈© kh√¥ng fallback
            "new_logic_result": True    # Logic m·ªõi s·∫Ω fallback
        },
        {
            "name": "Confidence th·∫•p nh∆∞ng sufficient=True",
            "context_quality": {
                "is_sufficient": True,
                "confidence": 0.15,
                "reason": "Confidence th·∫•p"
            },
            "threshold": 0.20,
            "expected_fallback": True,
            "old_logic_result": True,   # Logic c≈© c≈©ng fallback
            "new_logic_result": True    # Logic m·ªõi c≈©ng fallback
        },
        {
            "name": "Context ƒë·ªß v√† confidence cao",
            "context_quality": {
                "is_sufficient": True,
                "confidence": 0.80,
                "reason": "Th√¥ng tin ƒë·∫ßy ƒë·ªß"
            },
            "threshold": 0.20,
            "expected_fallback": False,
            "old_logic_result": False,  # Logic c≈© kh√¥ng fallback
            "new_logic_result": False   # Logic m·ªõi kh√¥ng fallback
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n--- Test Case {i}: {test_case['name']} ---")
        
        context_quality = test_case["context_quality"]
        threshold = test_case["threshold"]
        
        print(f"Context: sufficient={context_quality['is_sufficient']}, confidence={context_quality['confidence']}, threshold={threshold}")
        print(f"Reason: {context_quality['reason']}")
        
        # OLD LOGIC (ch·ªâ x√©t confidence)
        old_should_fallback = context_quality["confidence"] < threshold
        
        # NEW LOGIC (x√©t c·∫£ is_sufficient v√† confidence)
        insufficient_context = not context_quality.get("is_sufficient", True)
        low_confidence = context_quality["confidence"] < threshold
        new_should_fallback = insufficient_context or low_confidence
        
        print(f"\nOLD LOGIC: confidence < threshold = {context_quality['confidence']} < {threshold} = {old_should_fallback}")
        print(f"NEW LOGIC: insufficient_context OR low_confidence = {insufficient_context} OR {low_confidence} = {new_should_fallback}")
        
        # Verify results
        old_correct = old_should_fallback == test_case["old_logic_result"]
        new_correct = new_should_fallback == test_case["new_logic_result"]
        expected_correct = new_should_fallback == test_case["expected_fallback"]
        
        print(f"\n‚úÖ Old logic verification: {old_correct} (expected: {test_case['old_logic_result']}, got: {old_should_fallback})")
        print(f"‚úÖ New logic verification: {new_correct} (expected: {test_case['new_logic_result']}, got: {new_should_fallback})")
        print(f"‚úÖ Expected behavior: {expected_correct} (should fallback: {test_case['expected_fallback']}, new logic result: {new_should_fallback})")
        
        if test_case["name"] == "Tr∆∞·ªùng h·ª£p ban ƒë·∫ßu (Oracle question)":
            print(f"\nüéØ QUAN TR·ªåNG: ƒê√¢y l√† tr∆∞·ªùng h·ª£p t·ª´ logs g·ªëc!")
            print(f"   - Old logic: {old_should_fallback} (kh√¥ng fallback ‚Üí WRONG)")
            print(f"   - New logic: {new_should_fallback} (c√≥ fallback ‚Üí CORRECT)")
        
        print("-" * 50)
    
    print(f"\n‚úÖ CONCLUSION:")
    print(f"Logic m·ªõi ƒë√£ s·ª≠a ƒë∆∞·ª£c v·∫•n ƒë·ªÅ trong tr∆∞·ªùng h·ª£p ban ƒë·∫ßu:")
    print(f"- Khi is_sufficient=False nh∆∞ng confidence >= threshold")
    print(f"- Logic c≈©: ch·ªâ x√©t confidence ‚Üí kh√¥ng fallback (SAI)")  
    print(f"- Logic m·ªõi: x√©t c·∫£ is_sufficient ‚Üí c√≥ fallback (ƒê√öNG)")


if __name__ == "__main__":
    test_context_evaluation_logic() 