import logging
import json
import re
from typing import Tuple, Dict
from src.llm import GeminiLLM

# C·∫•u h√¨nh logging
logging.basicConfig(format="[QueryHandler] %(message)s", level=logging.INFO)
original_print = print

def print(*args, **kwargs):
    prefix = "[QueryHandler] "
    original_print(prefix + " ".join(map(str, args)), **kwargs)

logger = logging.getLogger(__name__)

class QueryHandler:
    """
    Module h·ª£p nh·∫•t x·ª≠ l√Ω v√† ph√¢n lo·∫°i c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng trong m·ªôt b∆∞·ªõc duy nh·∫•t
    ƒë·ªÉ gi·∫£m s·ªë l·∫ßn g·ªçi LLM. Bao g·ªìm t√≠nh nƒÉng s·ª≠a l·ªói ch√≠nh t·∫£ v√† vi·∫øt t·∫Øt.
    """

    def __init__(self):
        """Kh·ªüi t·∫°o QueryHandler."""
        self.llm = GeminiLLM()

        # Dictionary c√°c t·ª´ vi·∫øt t·∫Øt v√† l·ªói ch√≠nh t·∫£ ph·ªï bi·∫øn trong lƒ©nh v·ª±c CSDL
        self.abbreviation_dict = {
            # Vi·∫øt t·∫Øt ti·∫øng Vi·ªát
            "cdld": "CSDL",
            "csdl": "CSDL", 
            "qtcsdl": "qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu",
            "qtc∆°": "qu·∫£n tr·ªã c∆°",
            "hqtcsdl": "h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu",
            "h·ªá qtcsdl": "h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu",
            "h·ªá qt csdl": "h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu",
            "dbms": "DBMS",
            "rdbms": "RDBMS",
            "nosql": "NoSQL",
            "mongodb": "MongoDB",
            "mysql": "MySQL",
            "postgresql": "PostgreSQL",
            "sqlite": "SQLite",
            "oracle": "Oracle",
            "sqlserver": "SQL Server",
            "ms sql": "SQL Server",
            
            # L·ªói ch√≠nh t·∫£ ph·ªï bi·∫øn
            "co so du lieu": "c∆° s·ªü d·ªØ li·ªáu",
            "c∆° s·ªü d·ªØ li·ªáu": "c∆° s·ªü d·ªØ li·ªáu", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "quan tri": "qu·∫£n tr·ªã",
            "qu·∫£n tr·ªã": "qu·∫£n tr·ªã", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "du lieu": "d·ªØ li·ªáu",
            "d·ªØ li·ªáu": "d·ªØ li·ªáu", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "truy van": "truy v·∫•n",
            "truy v·∫•n": "truy v·∫•n", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "cau lenh": "c√¢u l·ªánh",
            "c√¢u l·ªánh": "c√¢u l·ªánh", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "bang": "b·∫£ng",
            "b·∫£ng": "b·∫£ng", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "truong": "tr∆∞·ªùng",
            "tr∆∞·ªùng": "tr∆∞·ªùng", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "khoa chinh": "kh√≥a ch√≠nh",
            "kh√≥a ch√≠nh": "kh√≥a ch√≠nh", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "khoa ngoai": "kh√≥a ngo·∫°i",
            "kh√≥a ngo·∫°i": "kh√≥a ngo·∫°i", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "chi muc": "ch·ªâ m·ª•c",
            "ch·ªâ m·ª•c": "ch·ªâ m·ª•c", # gi·ªØ nguy√™n n·∫øu ƒë√∫ng
            "backup": "sao l∆∞u",
            "restore": "kh√¥i ph·ª•c",
            
            # Vi·∫øt t·∫Øt SQL
            "select": "SELECT",
            "insert": "INSERT",
            "update": "UPDATE", 
            "delete": "DELETE",
            "create": "CREATE",
            "alter": "ALTER",
            "drop": "DROP",
            "join": "JOIN",
            "inner join": "INNER JOIN",
            "left join": "LEFT JOIN",
            "right join": "RIGHT JOIN",
            "full join": "FULL JOIN",
            "where": "WHERE",
            "group by": "GROUP BY",
            "order by": "ORDER BY",
            "having": "HAVING",
        }

    def _preprocess_query(self, query: str) -> str:
        """
        Ti·ªÅn x·ª≠ l√Ω c√¢u h·ªèi ƒë·ªÉ s·ª≠a l·ªói ch√≠nh t·∫£ v√† vi·∫øt t·∫Øt ph·ªï bi·∫øn.
        
        Args:
            query: C√¢u h·ªèi g·ªëc t·ª´ ng∆∞·ªùi d√πng
            
        Returns:
            C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c s·ª≠a l·ªói ch√≠nh t·∫£ v√† vi·∫øt t·∫Øt
        """
        processed_query = query.strip()
        
        # S·ª≠a c√°c t·ª´ vi·∫øt t·∫Øt v√† l·ªói ch√≠nh t·∫£
        for wrong_term, correct_term in self.abbreviation_dict.items():
            # S·ª≠ d·ª•ng regex ƒë·ªÉ thay th·∫ø t·ª´ c√≥ ranh gi·ªõi (word boundary)
            # ƒêi·ªÅu n√†y tr√°nh thay th·∫ø c√°c t·ª´ con
            pattern = r'\b' + re.escape(wrong_term) + r'\b'
            processed_query = re.sub(pattern, correct_term, processed_query, flags=re.IGNORECASE)
        
        # Log n·∫øu c√≥ thay ƒë·ªïi
        if processed_query != query:
            print(f"üîß ƒê√£ s·ª≠a query: '{query}' ‚Üí '{processed_query}'")
        
        return processed_query

    def _create_enhanced_prompt(self, query: str, conversation_history: str) -> str:
        """T·∫°o prompt ƒë∆∞·ª£c c·∫£i thi·ªán cho vi·ªác m·ªü r·ªông v√† ph√¢n lo·∫°i c√¢u h·ªèi."""
        # Cung c·∫•p l·ªãch s·ª≠ h·ªôi tho·∫°i, n·∫øu kh√¥ng c√≥ th√¨ th√¥ng b√°o
        history_context = conversation_history if conversation_history and conversation_history.strip() else "Kh√¥ng c√≥ l·ªãch s·ª≠ h·ªôi tho·∫°i."

        # X√¢y d·ª±ng prompt chi ti·∫øt v√† t·ªëi ∆∞u
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n chuy√™n v·ªÅ c∆° s·ªü d·ªØ li·ªáu. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch "C√¢u h·ªèi hi·ªán t·∫°i" d·ª±a tr√™n "L·ªãch s·ª≠ h·ªôi tho·∫°i" v√† tr·∫£ v·ªÅ JSON v·ªõi ba tr∆∞·ªùng: "expanded_query", "query_type", v√† "corrections_made".

        **NHI·ªÜM V·ª§ CH√çNH:**

        1. **`expanded_query`** (M·ªü r·ªông v√† l√†m r√µ c√¢u h·ªèi):
           ‚Ä¢ Vi·∫øt l·∫°i c√¢u h·ªèi th√†nh d·∫°ng ho√†n ch·ªânh, ƒë·ªôc l·∫≠p, r√µ r√†ng
           ‚Ä¢ Gi·∫£i quy·∫øt t·∫•t c·∫£ tham chi·∫øu m∆° h·ªì ("n√≥", "c√°i ƒë√≥", "ch√∫ng", "nh∆∞ v·∫≠y")
           ‚Ä¢ X·ª≠ l√Ω c√°c ph·∫£n h·ªìi ng·∫Øn g·ªçn ("ok", "ƒë∆∞·ª£c", "ti·∫øp t·ª•c", "yes", "v√¢ng"):
             - N·∫øu AI v·ª´a ƒë·ªÅ xu·∫•t ch·ªß ƒë·ªÅ ‚Üí chuy·ªÉn th√†nh c√¢u h·ªèi c·ª• th·ªÉ v·ªÅ ch·ªß ƒë·ªÅ ƒë√≥
             - N·∫øu AI h·ªèi c√≥ mu·ªën ti·∫øp t·ª•c ‚Üí chuy·ªÉn th√†nh y√™u c·∫ßu ti·∫øp t·ª•c r√µ r√†ng
           ‚Ä¢ S·ª¨A L·ªñI CH√çNH T·∫¢ v√† CHU·∫®N H√ìA thu·∫≠t ng·ªØ:
             - "cdld" ‚Üí "CSDL"
             - "co so du lieu" ‚Üí "c∆° s·ªü d·ªØ li·ªáu" 
             - "quan tri" ‚Üí "qu·∫£n tr·ªã"
             - "du lieu" ‚Üí "d·ªØ li·ªáu"
             - C√°c l·ªánh SQL vi·∫øt th∆∞·ªùng ‚Üí VI·∫æT HOA (select ‚Üí SELECT)
           ‚Ä¢ B·∫£o to√†n v√† chu·∫©n h√≥a t·∫•t c·∫£ thu·∫≠t ng·ªØ k·ªπ thu·∫≠t

        2. **`query_type`** (Ph√¢n lo·∫°i ch√≠nh x√°c):
           
           ‚Ä¢ **`question_from_document`**: C√¢u h·ªèi v·ªÅ ki·∫øn th·ª©c CSDL c∆° b·∫£n/l√Ω thuy·∫øt
             - Kh√°i ni·ªám, ƒë·ªãnh nghƒ©a, nguy√™n l√Ω
             - So s√°nh c√¥ng ngh·ªá (SQL vs NoSQL) 
             - C√∫ ph√°p, c·∫•u tr√∫c l·ªánh
             - Thi·∫øt k·∫ø CSDL, m√¥ h√¨nh d·ªØ li·ªáu
             - V√≠ d·ª•: "CSDL l√† g√¨?", "Kh√≥a ch√≠nh v√† kh√≥a ngo·∫°i kh√°c nhau nh∆∞ th·∫ø n√†o?"

           ‚Ä¢ **`realtime_question`**: C√¢u h·ªèi v·ªÅ xu h∆∞·ªõng/tin t·ª©c/th√¥ng tin c·∫≠p nh·∫≠t m·ªõi
             - C√≥ t·ª´ kh√≥a th·ªùi gian: "hi·ªán t·∫°i", "m·ªõi nh·∫•t", "2024", "g·∫ßn ƒë√¢y", "hi·ªán nay"
             - K·∫æT H·ª¢P v·ªõi √Ω ƒë·ªãnh t√¨m hi·ªÉu xu h∆∞·ªõng/tin t·ª©c/c·∫≠p nh·∫≠t m·ªõi
             - Xu h∆∞·ªõng c√¥ng ngh·ªá, phi√™n b·∫£n m·ªõi, th·ªëng k√™ th·ªã tr∆∞·ªùng
             - V√≠ d·ª•: "Xu h∆∞·ªõng CSDL hi·ªán t·∫°i", "PostgreSQL 16 c√≥ g√¨ m·ªõi?", "CSDL n√†o ph·ªï bi·∫øn nh·∫•t hi·ªán nay?"
             
             **CH√ö √ù**: Ph√¢n bi·ªát v·ªõi c√¢u h·ªèi c∆° b·∫£n:
             - "C√°c lo·∫°i CSDL hi·ªán nay" = question_from_document (h·ªèi ph√¢n lo·∫°i c∆° b·∫£n)
             - "CSDL n√†o ƒëang th·ªãnh h√†nh hi·ªán nay" = realtime_question (h·ªèi xu h∆∞·ªõng)

           ‚Ä¢ **`sql_code_task`**: Y√™u c·∫ßu tr·ª±c ti·∫øp v·ªÅ code SQL
             - Vi·∫øt/t·∫°o c√¢u l·ªánh SQL
             - Gi·∫£i th√≠ch/ph√¢n t√≠ch code SQL c√≥ s·∫µn
             - Debug/t·ªëi ∆∞u h√≥a SQL
             - V√≠ d·ª•: "Vi·∫øt SQL t·∫°o b·∫£ng User", "Gi·∫£i th√≠ch query n√†y: SELECT..."

           ‚Ä¢ **`other_question`**: Kh√¥ng li√™n quan ƒë·∫øn CSDL
             - CH·ªà d√πng khi ho√†n to√†n kh√¥ng li√™n quan sau khi m·ªü r·ªông
             - V√≠ d·ª•: "Th·ªùi ti·∫øt", "N·∫•u ƒÉn", "Th·ªÉ thao"

        3. **`corrections_made`** (Danh s√°ch s·ª≠a l·ªói):
           ‚Ä¢ M·∫£ng c√°c thay ƒë·ªïi ƒë√£ th·ª±c hi·ªán
           ‚Ä¢ Format: ["cdld ‚Üí CSDL", "co so ‚Üí c∆° s·ªü"]
           ‚Ä¢ ƒê·ªÉ m·∫£ng r·ªóng [] n·∫øu kh√¥ng c√≥ s·ª≠a ƒë·ªïi

        **V√ç D·ª§ TH·ª∞C T·∫æ:**

        Input: "Kh√°i ni·ªám h·ªá qu·∫£n tr·ªã cdld l√† g√¨?"
        ```json
        {{
          "expanded_query": "Kh√°i ni·ªám h·ªá qu·∫£n tr·ªã CSDL (C∆° s·ªü d·ªØ li·ªáu) l√† g√¨?",
          "query_type": "question_from_document",
          "corrections_made": ["cdld ‚Üí CSDL"]
        }}
        ```

        Input: "ok" (sau khi AI ƒë·ªÅ xu·∫•t t√¨m hi·ªÉu v·ªÅ Index)
        ```json
        {{
          "expanded_query": "T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ Index (ch·ªâ m·ª•c) trong c∆° s·ªü d·ªØ li·ªáu",
          "query_type": "question_from_document", 
          "corrections_made": []
        }}
        ```

        **NG·ªÆ C·∫¢NH:**
        L·ªãch s·ª≠ h·ªôi tho·∫°i:
        ---
        {history_context}
        ---

        C√¢u h·ªèi hi·ªán t·∫°i: "{query}"

        **XU·∫§T K·∫æT QU·∫¢:**
        CH·ªà tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c:
        ```json
        {{
          "expanded_query": "...",
          "query_type": "...",
          "corrections_made": [...]
        }}
        ```
        """
        return prompt

    def expand_and_classify_query(self, query: str, conversation_history: str) -> Tuple[str, str]:
        """
        X·ª≠ l√Ω c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ m·ªü r·ªông v√† ph√¢n lo·∫°i trong m·ªôt l·ªánh g·ªçi LLM duy nh·∫•t.
        Bao g·ªìm t√≠nh nƒÉng s·ª≠a l·ªói ch√≠nh t·∫£ v√† vi·∫øt t·∫Øt.

        Args:
            query: C√¢u h·ªèi g·ªëc t·ª´ ng∆∞·ªùi d√πng
            conversation_history: L·ªãch s·ª≠ h·ªôi tho·∫°i ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh

        Returns:
            M·ªôt tuple ch·ª©a (expanded_query, query_type).
        """
        # B∆∞·ªõc 1: Ti·ªÅn x·ª≠ l√Ω c∆° b·∫£n (s·ª≠a l·ªói ch√≠nh t·∫£ ph·ªï bi·∫øn)
        preprocessed_query = self._preprocess_query(query)
        
        # B∆∞·ªõc 2: T·∫°o prompt n√¢ng cao
        prompt = self._create_enhanced_prompt(preprocessed_query, conversation_history)
        
        print(f"ü§ñ G·ªçi LLM v·ªõi query: '{query}' ‚Üí '{preprocessed_query}'")
        print(f"üìú History length: {len(conversation_history) if conversation_history else 0}")
        
        try:
            response = self.llm.invoke(prompt)
            response_text = response.content.strip()
            print(f"ü§ñ LLM response: {response_text[:300]}..." if len(response_text) > 300 else f"ü§ñ LLM response: {response_text}")

            # Tr√≠ch xu·∫•t ph·∫ßn JSON t·ª´ ph·∫£n h·ªìi
            json_match = re.search(r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                parsed_response = json.loads(json_str)
                
                expanded_query = parsed_response.get("expanded_query", "").strip()
                query_type = parsed_response.get("query_type", "").strip()
                corrections_made = parsed_response.get("corrections_made", [])

                # X√°c th·ª±c v√† fallback
                if not expanded_query or not isinstance(expanded_query, str):
                    expanded_query = preprocessed_query
                    print(f"‚ö†Ô∏è Kh√¥ng c√≥ expanded_query h·ª£p l·ªá, s·ª≠ d·ª•ng preprocessed query")
                
                valid_types = ["question_from_document", "realtime_question", "sql_code_task", "other_question"]
                if query_type not in valid_types:
                    print(f"‚ö†Ô∏è Query type kh√¥ng h·ª£p l·ªá '{query_type}', m·∫∑c ƒë·ªãnh 'question_from_document'")
                    query_type = 'question_from_document'
                
                # Log k·∫øt qu·∫£
                print(f"‚úÖ QueryHandler th√†nh c√¥ng:")
                print(f"   üìù Query g·ªëc: '{query}'")
                if preprocessed_query != query:
                    print(f"   üîß Ti·ªÅn x·ª≠ l√Ω: '{preprocessed_query}'")
                print(f"   üìà Query m·ªü r·ªông: '{expanded_query}'")
                print(f"   üè∑Ô∏è Lo·∫°i: '{query_type}'")
                if corrections_made:
                    print(f"   üîß S·ª≠a ƒë·ªïi: {corrections_made}")
                
                return expanded_query, query_type
            else:
                raise json.JSONDecodeError("Kh√¥ng t√¨m th·∫•y JSON trong response", response_text, 0)

        except (json.JSONDecodeError, AttributeError, KeyError, TypeError) as e:
            print(f"‚ùå QueryHandler g·∫∑p l·ªói: {type(e).__name__}: {e}")
            print(f"üîÑ Fallback - Query: '{preprocessed_query}' | Type: 'question_from_document'")
            
            # Fallback n√¢ng cao: √≠t nh·∫•t s·ª≠ d·ª•ng preprocessed query
            return preprocessed_query, 'question_from_document'
        
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {type(e).__name__}: {e}")
            print(f"üîÑ Emergency fallback - Query g·ªëc: '{query}' | Type: 'question_from_document'")
            return query, 'question_from_document'
    
    def get_response_for_other_question(self, query: str) -> str:
        """
        Tr·∫£ v·ªÅ ph·∫£n h·ªìi cho c√°c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu

        Args:
            query: C√¢u h·ªèi c·∫ßn ph·∫£n h·ªìi

        Returns:
            Ph·∫£n h·ªìi c·ªë ƒë·ªãnh cho c√¢u h·ªèi kh√¥ng li√™n quan
        """
        return """Xin ch√†o! üëã 

M√¨nh l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ **C∆° s·ªü d·ªØ li·ªáu** v√† **SQL**. M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n:

üîπ **H·ªçc kh√°i ni·ªám**: CSDL, RDBMS, NoSQL, thi·∫øt k·∫ø c∆° s·ªü d·ªØ li·ªáu
üîπ **Vi·∫øt SQL**: SELECT, INSERT, UPDATE, DELETE, JOIN, subquery
üîπ **T·ªëi ∆∞u h√≥a**: Index, query optimization, performance tuning  
üîπ **Gi·∫£i th√≠ch**: Ph√¢n t√≠ch v√† debug c√¢u l·ªánh SQL
üîπ **So s√°nh**: MySQL vs PostgreSQL, SQL vs NoSQL

B·∫°n c√≥ c√¢u h·ªèi n√†o v·ªÅ c∆° s·ªü d·ªØ li·ªáu kh√¥ng? üòä"""

    def test_preprocessing(self, test_queries: list = None) -> None:
        """
        H√†m test ƒë·ªÉ ki·ªÉm tra kh·∫£ nƒÉng preprocessing c·ªßa QueryHandler
        
        Args:
            test_queries: Danh s√°ch c√¢u h·ªèi test, n·∫øu None s·∫Ω d√πng m·∫∑c ƒë·ªãnh
        """
        if test_queries is None:
            test_queries = [
                "Kh√°i ni·ªám h·ªá qu·∫£n tr·ªã cdld l√† g√¨?",
                "select * from bang user",
                "co so du lieu quan tri la gi?", 
                "T·∫°o bang v·ªõi khoa chinh",
                "inner join va left join khac nhau nhu the nao?",
                "Backup va restore du lieu",
                "C√°ch t·ªëi ∆∞u truy van sql"
            ]
        
        print("üß™ TESTING QUERY PREPROCESSING:")
        print("=" * 50)
        
        for i, query in enumerate(test_queries, 1):
            processed = self._preprocess_query(query)
            print(f"{i}. '{query}'")
            print(f"   ‚Üí '{processed}'")
            print()