import uvicorn
import argparse
import os
import time
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

from src.api import app
from src.embeddings import initialize_embeddings
from src.vectorstore import VectorStoreManager
from src.config import (
    EMBEDDING_MODEL,
    DOCUMENT_LOADER_MAX_WORKERS,
    QDRANT_BATCH_SIZE,
    CLUSTERING_BATCH_SIZE,
    QDRANT_URL,
)
from src.api.routes import router

# T·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI(
    title="API h·ªá th·ªëng RAG cho CSDL",
    description="API cho h·ªá th·ªëng RAG h·ªó tr·ª£ m√¥n c∆° s·ªü d·ªØ li·ªáu",
    version="1.0.0",
)

# C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Th√™m router
app.include_router(router, prefix="/api")

# T·∫°o th∆∞ m·ª•c ch·ª©a ·∫£nh n·∫øu ch∆∞a t·ªìn t·∫°i
images_dir = os.path.join(os.getcwd(), "src", "data", "images")
os.makedirs(images_dir, exist_ok=True)

# Mount th∆∞ m·ª•c tƒ©nh ƒë·ªÉ ph·ª•c v·ª• h√¨nh ·∫£nh
app.mount("/images", StaticFiles(directory=images_dir), name="images")


@app.get("/")
async def root():
    return {
        "message": "API h·ªá th·ªëng RAG ƒëang ho·∫°t ƒë·ªông. S·ª≠ d·ª•ng /api cho c√°c endpoint."
    }


def check_system_ready():
    """Ki·ªÉm tra t·∫•t c·∫£ th√†nh ph·∫ßn c·∫ßn thi·∫øt tr∆∞·ªõc khi kh·ªüi ƒë·ªông h·ªá th·ªëng"""
    print("\nüîç ƒêang ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng...")

    # Ki·ªÉm tra c·∫•u h√¨nh
    print(f"üìã Th√¥ng tin c·∫•u h√¨nh:")
    print(f"  - Embedding model: {EMBEDDING_MODEL}")
    print(f"  - Document loader workers: {DOCUMENT_LOADER_MAX_WORKERS}")
    print(f"  - Clustering batch size: {CLUSTERING_BATCH_SIZE}")
    print(f"  - Qdrant batch size: {QDRANT_BATCH_SIZE}")

    # T·∫£i v√† ki·ªÉm tra embedding model
    print(f"\n‚è≥ ƒêang t·∫£i embedding model: {EMBEDDING_MODEL}...")
    start_time = time.time()
    try:
        embeddings = initialize_embeddings()
        embedding_size = len(embeddings.embed_query("Test embedding system"))
        print(
            f"‚úÖ Embedding model ƒë√£ s·∫µn s√†ng! (k√≠ch th∆∞·ªõc vector: {embedding_size}, th·ªùi gian: {time.time() - start_time:.2f}s)"
        )
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i embedding model: {str(e)}")
        raise e

    # Ki·ªÉm tra k·∫øt n·ªëi Qdrant
    print(f"\n‚è≥ ƒêang ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Qdrant: {QDRANT_URL}...")
    try:
        vector_store = VectorStoreManager(embeddings)
        # Th·ª≠ kh·ªüi t·∫°o collection ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
        vector_store.initialize_collection()
        print(f"‚úÖ K·∫øt n·ªëi ƒë·∫øn Qdrant th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn Qdrant: {str(e)}")
        raise e

    print("\n‚úÖ T·∫•t c·∫£ h·ªá th·ªëng ƒë√£ s·∫µn s√†ng!")
    return True


def parse_args():
    """Ph√¢n t√≠ch tham s·ªë d√≤ng l·ªánh"""
    parser = argparse.ArgumentParser(description="API cho RAG Pipeline")
    parser.add_argument("--host", type=str, default="0.0.0.0", help="Host ƒë·ªÉ ch·∫°y API")
    parser.add_argument("--port", type=int, default=8000, help="Port ƒë·ªÉ ch·∫°y API")
    parser.add_argument(
        "--reload", action="store_true", help="T·ª± ƒë·ªông reload khi code thay ƒë·ªïi"
    )
    return parser.parse_args()


def main():
    """H√†m main ƒë·ªÉ ch·∫°y API"""
    args = parse_args()

    # Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng tr∆∞·ªõc khi kh·ªüi ƒë·ªông API
    check_system_ready()

    # In th√¥ng tin v·ªÅ API
    print(f"\nüöÄ ƒêang kh·ªüi ƒë·ªông API t·∫°i http://{args.host}:{args.port}")
    print("üìö C√°c API c√≥ s·∫µn:")
    print("  - GET /           : Ki·ªÉm tra tr·∫°ng th√°i API")
    print("  - POST /query     : Truy v·∫•n h·ªá th·ªëng v·ªõi m·ªôt c√¢u h·ªèi")
    print("  - POST /upload    : Upload v√† index t√†i li·ªáu (l∆∞u v√†o th∆∞ m·ª•c c·ªë ƒë·ªãnh)")
    print("  - POST /index/files : Index d·ªØ li·ªáu t·ª´ c√°c file (th∆∞ m·ª•c t·∫°m)")
    print("  - POST /index/path : Index d·ªØ li·ªáu t·ª´ m·ªôt th∆∞ m·ª•c")
    print("  - GET /index/status/{task_id} : Ki·ªÉm tra tr·∫°ng th√°i c·ªßa task indexing")
    print("  - GET /index/progress/{task_id} : Ki·ªÉm tra ti·∫øn tr√¨nh chi ti·∫øt c·ªßa task")
    print("  - GET /files      : Li·ªát k√™ t·∫•t c·∫£ c√°c file ƒë√£ upload")
    print("  - DELETE /files/{file_name} : X√≥a file v√† embedding t∆∞∆°ng ·ª©ng")
    print("  - GET /uploads    : Li·ªát k√™ c√°c th∆∞ m·ª•c upload")
    print("  - DELETE /index   : X√≥a to√†n b·ªô index")
    print("üìñ Truy c·∫≠p API docs t·∫°i: http://localhost:8000/docs")

    # Ch·∫°y API v·ªõi Uvicorn
    uvicorn.run("src.api:app", host=args.host, port=args.port, reload=args.reload)


if __name__ == "__main__":
    main()
