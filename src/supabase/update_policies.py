#!/usr/bin/env python3
"""
Script ƒë·ªÉ c·∫≠p nh·∫≠t RLS policies cho admin c√≥ th·ªÉ qu·∫£n l√Ω t·∫•t c·∫£ file
"""

import os
import sys
from supabase import create_client, Client

def update_admin_policies():
    """C·∫≠p nh·∫≠t policies cho admin"""
    
    # L·∫•y th√¥ng tin k·∫øt n·ªëi Supabase
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_service_key = os.getenv("SUPABASE_SERVICE_KEY")
    
    if not supabase_url or not supabase_service_key:
        print("‚ùå Thi·∫øu SUPABASE_URL ho·∫∑c SUPABASE_SERVICE_KEY trong environment variables")
        return False
    
    try:
        # T·∫°o client v·ªõi service key ƒë·ªÉ c√≥ quy·ªÅn admin
        supabase: Client = create_client(supabase_url, supabase_service_key)
        
        print("üîÑ ƒêang c·∫≠p nh·∫≠t RLS policies cho admin...")
        
        # ƒê·ªçc v√† th·ª±c thi script SQL
        sql_script = """
        -- X√≥a policy c≈© n·∫øu t·ªìn t·∫°i
        DROP POLICY IF EXISTS "Admin can delete all files" ON document_files;
        DROP POLICY IF EXISTS "Admin can update all files" ON document_files;
        DROP POLICY IF EXISTS "Admin can view all files" ON document_files;

        -- T·∫°o policy m·ªõi cho ph√©p admin x√≥a t·∫•t c·∫£ file
        CREATE POLICY "Admin can delete all files" ON document_files
        FOR DELETE
        USING (
            EXISTS (
                SELECT 1 FROM user_roles
                WHERE user_id = auth.uid() AND role = 'admin'
            )
        );

        -- T·∫°o policy m·ªõi cho ph√©p admin c·∫≠p nh·∫≠t t·∫•t c·∫£ file
        CREATE POLICY "Admin can update all files" ON document_files
        FOR UPDATE
        USING (
            EXISTS (
                SELECT 1 FROM user_roles
                WHERE user_id = auth.uid() AND role = 'admin'
            )
        );

        -- T·∫°o policy m·ªõi cho ph√©p admin xem t·∫•t c·∫£ file
        CREATE POLICY "Admin can view all files" ON document_files
        FOR SELECT
        USING (
            EXISTS (
                SELECT 1 FROM user_roles
                WHERE user_id = auth.uid() AND role = 'admin'
            )
        );
        """
        
        # Th·ª±c thi script SQL
        result = supabase.rpc('run_sql', {'query': sql_script}).execute()
        
        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng RLS policies cho admin")
        
        # Ki·ªÉm tra c√°c policy ƒë√£ ƒë∆∞·ª£c t·∫°o
        check_sql = """
        SELECT schemaname, tablename, policyname, cmd, qual 
        FROM pg_policies 
        WHERE tablename = 'document_files' 
        ORDER BY policyname;
        """
        
        policies_result = supabase.rpc('run_sql', {'query': check_sql}).execute()
        print("üìã Danh s√°ch policies hi·ªán t·∫°i:")
        print(policies_result.data)
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t policies: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t RLS policies...")
    
    success = update_admin_policies()
    
    if success:
        print("üéâ Ho√†n th√†nh c·∫≠p nh·∫≠t policies!")
        sys.exit(0)
    else:
        print("üí• C·∫≠p nh·∫≠t policies th·∫•t b·∫°i!")
        sys.exit(1) 