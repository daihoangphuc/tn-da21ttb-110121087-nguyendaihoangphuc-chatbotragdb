name: Build, Push and Deploy

on:
  push:
    branches:
      - test/cicd
      - main
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 300s
          script: |
            echo "=== Starting deployment ==="
            whoami
            pwd
            
            # Navigate to app directory
            mkdir -p ~/app
            cd ~/app
            
            echo "=== Pulling Docker images ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
            
            echo "=== Stopping existing containers ==="
            docker-compose down 2>/dev/null || echo "No existing containers"
            
            echo "=== Creating docker-compose.yml ==="
            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            
            services:
              rag-app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
                container_name: rag-app
                ports:
                  - "8000:8000"
                environment:
                  - USE_GEMINI=true
                  - GEMINI_API_KEY=AIzaSyBuj64bK2ubgOv7cQTo0fVsDh0OOYoJRDg,AIzaSyDxT3CPjQzrgyoyXPUl9VK3Jj-wcaRdX_o,AIzaSyDSQkmsAIm_d62yXCu-iPyyU7vXEXVL0LA,AIzaSyDCeISy4laS1Skgnr_uYQiAsrlyLYdXptg,AIzaSyDXASZq2kt2s4AkwlnMiIqO3jkw7FOEoCc,AIzaSyAo37mPje3YHqjjk5qFIz7P1-nFGmWuEB4,AIzaSyCvVJFzZJq8t7XNEzwYTboFSTi9CZnpF1s,AIzaSyAUX-45CBoWfLvoOWzCzz_BddYE4514D8Y,AIzaSyBKH7G3Aai1JbfqApgwJH5jXQLF0Jj30sw,AIzaSyD5JqMWR2GPbVsdAC1nQ4CWvW8ZnnD3Oyk
                  - QDRANT_URL=https://2f7481a0-b7e5-4785-afc0-14e7912f70d8.europe-west3-0.gcp.cloud.qdrant.io:6333/
                  - QDRANT_API_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3MiOiJtIn0.oD5nuszsntn8KKDUPDxB5UisjLYVEzonYaDByHdwFbg
                  - QDRANT_COLLECTION_NAME=csdl_rag
                  - TAVILY_API_KEY=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
                  - EMBEDDING_MODEL_NAME=intfloat/multilingual-e5-small
                  - LLM_MODEL_NAME=gemini-2.0-flash
                  - DEFAULT_ALPHA=0.7
                  - CHUNK_SIZE=800
                  - CHUNK_OVERLAP=200
                  - SUPABASE_URL=https://yhlgzixdgvjllrblsxsr.supabase.co
                  - SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlobGd6aXhkZ3ZqbGxyYmxzeHNyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3OTY1OTMsImV4cCI6MjA2MjM3MjU5M30.OHO8YwTzASgThYVPHFFEOu4COXKBhWnrVdy01c-PyrA
                restart: unless-stopped
                networks:
                  - rag-network
            
              frontend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
                container_name: rag-frontend
                ports:
                  - "3000:3000"
                environment:
                  - NEXT_PUBLIC_API_URL=http://rag-app:8000
                depends_on:
                  - rag-app
                restart: unless-stopped
                networks:
                  - rag-network
                  
            networks:
              rag-network:
                driver: bridge
            EOF
            
            echo "=== Starting containers ==="
            # Ensure Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Ensure proper permissions
            sudo chown -R $USER:$USER ~/app
            
            # Stop and remove any conflicting containers
            docker stop $(docker ps -a -q) 2>/dev/null || true
            docker rm $(docker ps -a -q) 2>/dev/null || true
            
            # Start the containers
            docker-compose up -d
            
            echo "=== Checking container status ==="
            sleep 30
            docker-compose ps
            docker ps -a
            
            echo "=== Container logs ==="
            docker-compose logs --tail=20
            
            echo "=== Deployment completed ==="
