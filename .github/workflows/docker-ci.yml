name: Build, Push and Deploy

on:
  push:
    branches:
      - test/cicd
      - main
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Create backend .env file
        run: echo "${{ secrets.BACKEND_ENV }}" > .env

      - name: Create frontend .env file
        run: echo "${{ secrets.FRONTEND_ENV }}" > frontend/.env

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/frontend:latest

      # Debug SSH connection
      - name: Debug SSH Connection
        run: |
          echo "Checking SSH key format..."
          echo "${{ env.VPS_SSH_KEY }}" | head -1
          echo "${{ env.VPS_SSH_KEY }}" | tail -1
          
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ env.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Test SSH connection
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ env.VPS_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 300s
          debug: true
          script: |
            echo "=== Starting deployment ==="
            whoami
            pwd
            
            # Navigate to app directory
            mkdir -p /home/${{ env.VPS_USER }}/app
            cd /home/${{ env.VPS_USER }}/app
            
            echo "=== Pulling Docker images ==="
            docker pull ${{ env.DOCKERHUB_USERNAME }}/backend:latest || echo "Backend pull failed"
            docker pull ${{ env.DOCKERHUB_USERNAME }}/frontend:latest || echo "Frontend pull failed"
            
            echo "=== Stopping existing containers ==="
            docker-compose down || echo "No existing containers"
            
            echo "=== Creating docker-compose.yml ==="
            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            
            services:
              rag-app:
                image: ${{ env.DOCKERHUB_USERNAME }}/backend:latest
                container_name: rag-app
                ports:
                  - "8000:8000"
                environment:
                  - QDRANT_URL=http://qdrant:6333
                volumes:
                  - ./data:/app/data
                depends_on:
                  - qdrant
                restart: unless-stopped
                networks:
                  - rag-network
            
              frontend:
                image: ${{ env.DOCKERHUB_USERNAME }}/frontend:latest
                container_name: rag-frontend
                ports:
                  - "3000:3000"
                environment:
                  - NEXT_PUBLIC_API_URL=http://${{ env.VPS_HOST }}:8000
                depends_on:
                  - rag-app
                restart: unless-stopped
                networks:
                  - rag-network
            
              qdrant:
                image: qdrant/qdrant:latest
                container_name: qdrant
                ports:
                  - "6333:6333"
                volumes:
                  - qdrant-data:/qdrant/storage
                restart: unless-stopped
                networks:
                  - rag-network
            
            volumes:
              qdrant-data:
            
            networks:
              rag-network:
                driver: bridge
            EOF
            
            echo "=== Starting containers ==="
            docker-compose up -d
            
            echo "=== Waiting for containers to start ==="
            sleep 30
            
            echo "=== Checking container status ==="
            docker-compose ps
            
            echo "=== Cleaning up old images ==="
            docker image prune -f
            
            echo "=== Deployment completed ==="