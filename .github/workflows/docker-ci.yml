name: Build, Push and Deploy

on:
  push:
    branches:
      - test/cicd
      - main
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 300s
          script: |
            echo "=== Starting deployment ==="
            whoami
            pwd
              # Navigate to app directory
            mkdir -p ~/app
            cd ~/app
            
            echo "=== Pulling Docker images ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
              echo "=== Cleaning up old Docker images ==="
            # Stop and remove all containers first
            docker stop $(docker ps -a -q) 2>/dev/null || echo "No containers to stop"
            docker rm $(docker ps -a -q) 2>/dev/null || echo "No containers to remove"
            
            # Remove all images with <none> tag
            docker images | grep '<none>' | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || echo "No <none> images to remove"
            
            # Remove old versions of our specific images
            docker images ${{ secrets.DOCKERHUB_USERNAME }}/backend | grep -v latest | awk 'NR>1{print $3}' | xargs -r docker rmi -f 2>/dev/null || echo "No old backend images to remove"
            docker images ${{ secrets.DOCKERHUB_USERNAME }}/frontend | grep -v latest | awk 'NR>1{print $3}' | xargs -r docker rmi -f 2>/dev/null || echo "No old frontend images to remove"
            
            # Clean up unused images, containers, and networks
            docker system prune -f
            docker image prune -f
              echo "=== Stopping existing containers ==="
            docker-compose down 2>/dev/null || echo "No existing containers"
            
            echo "=== Creating .env file for backend ==="
            cat > .env << 'EOF'
            ${{ secrets.BACKEND_ENV }}
            EOF
            
            echo "=== Creating docker-compose.yml ==="
            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            
            services:
              rag-app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
                container_name: rag-app
                ports:
                  - "8000:8000"
                env_file:
                  - .env
                restart: unless-stopped
                networks:
                  - rag-network              frontend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
                container_name: rag-frontend
                ports:
                  - "3000:3000"
                environment:
                  - NEXT_PUBLIC_API_URL=http://34.30.191.213:8000/api
                  - NEXT_PUBLIC_INTERNAL_API_URL=http://rag-app:8000/api
                depends_on:
                  - rag-app
                restart: unless-stopped
                networks:
                  - rag-network
                  
            networks:
              rag-network:
                driver: bridge
            EOF
            
            echo "=== Starting containers ==="
            # Ensure Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
              # Ensure proper permissions
            sudo chown -R $USER:$USER ~/app
              # Start the containers
            docker-compose up -d
            
            # Wait for containers to start
            echo "⏳ Waiting for containers to start..."
            sleep 10
            
            # Check if containers are running, restart if needed
            if ! docker-compose ps | grep -q "Up"; then
              echo "⚠️ Some containers not running, attempting restart..."
              docker-compose restart
              sleep 20
            fi            echo "=== Checking container status ==="
            sleep 20
            docker-compose ps
            docker ps -a
            
            echo "=== Testing API connectivity ==="
            # Test backend API
            if curl -f http://localhost:8000/api/ > /dev/null 2>&1; then
              echo "✅ Backend API is responding"
              curl -s http://localhost:8000/api/ | head -3
            else
              echo "❌ Backend API is not responding"
            fi
            
            # Test frontend
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend is responding"
            else
              echo "❌ Frontend is not responding"
            fi
            
            echo "=== Container logs ==="
            echo "📊 Backend logs:"
            docker-compose logs --tail=30 rag-app
            echo "📊 Frontend logs:"
            docker-compose logs --tail=30 frontend
            
            echo "=== Deployment completed ==="
