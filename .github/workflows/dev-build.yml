name: Development Build and Test

on:
  push:
    branches-ignore: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test environment file
        run: |
          cat > .env << 'EOF'
          USE_GEMINI=true
          GEMINI_API_KEY=test_key
          QDRANT_URL=http://localhost:6333
          QDRANT_API_KEY=test_key
          QDRANT_COLLECTION_NAME=test_collection
          EMBEDDING_MODEL_NAME=intfloat/multilingual-e5-small
          LLM_MODEL_NAME=gemini-2.0-flash
          LLM_TEMPERATURE=0
          LLM_TOP_P=0.85
          DEFAULT_ALPHA=0.7
          CHUNK_SIZE=800
          CHUNK_OVERLAP=200
          EOF

      - name: Run backend tests
        run: |
          # Add your backend test commands here
          python -m pytest src/test/ -v || echo "No tests found or tests failed"

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: Create test environment file
        run: |
          cd frontend
          echo "NEXT_PUBLIC_API_URL=http://localhost:8000/api" > .env.local

      - name: Run type check
        run: |
          cd frontend
          pnpm run build

      - name: Run linting
        run: |
          cd frontend
          pnpm run lint || echo "Linting completed with warnings"

  build-test-images:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment files
        run: |
          if [ "${{ matrix.service }}" = "backend" ]; then
            cat > .env << 'EOF'
          USE_GEMINI=true
          GEMINI_API_KEY=test_key
          QDRANT_URL=http://localhost:6333
          QDRANT_API_KEY=test_key
          QDRANT_COLLECTION_NAME=test_collection
          EMBEDDING_MODEL_NAME=intfloat/multilingual-e5-small
          LLM_MODEL_NAME=gemini-2.0-flash
          LLM_TEMPERATURE=0
          LLM_TOP_P=0.85
          DEFAULT_ALPHA=0.7
          CHUNK_SIZE=800
          CHUNK_OVERLAP=200
          EOF
          else
            echo "NEXT_PUBLIC_API_URL=http://localhost:8000/api" > frontend/.env.local
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: false
          tags: datn-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ matrix.service == 'frontend' && 'NEXT_PUBLIC_API_URL=http://localhost:8000/api' || '' }}
