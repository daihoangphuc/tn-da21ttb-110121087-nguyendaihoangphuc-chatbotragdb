name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/datn-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create backend .env file
        if: matrix.service == 'backend'
        run: |
          echo "${{ secrets.BACKEND_ENV }}" > .env      - name: Create frontend .env file
        if: matrix.service == 'frontend'
        run: |
          echo "${{ secrets.FRONTEND_ENV }}" > frontend/.env.local

      - name: Setup pnpm for frontend
        if: matrix.service == 'frontend'
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Fix pnpm lockfile for frontend
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          # Regenerate lockfile if it's incompatible
          pnpm install --no-frozen-lockfile

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ matrix.service == 'frontend' && format('NEXT_PUBLIC_API_URL=http://{0}:8000/api', secrets.VPS_HOST) || '' }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment files
        run: |
          # Create docker-compose.prod.yml for production
          cat > docker-compose.prod.yml << 'EOF'
          services:
            backend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/datn-backend:latest
              container_name: datn-backend
              ports:
                - "8000:8000"
              environment:
                - PYTHONPATH=/app
                - PYTHONUNBUFFERED=1
              volumes:
                - ./backend_data:/app/src/data
                - ./.env:/app/.env
              networks:
                - datn-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            frontend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/datn-frontend:latest
              container_name: datn-frontend
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
              depends_on:
                backend:
                  condition: service_healthy
              networks:
                - datn-network
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

          networks:
            datn-network:
              driver: bridge

          volumes:
            backend_data:
          EOF

          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "Starting deployment..."

          # Create deployment directory if it doesn't exist
          mkdir -p ~/datn-deployment
          cd ~/datn-deployment

          # Stop and remove existing containers
          echo "Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down --remove-orphans || true

          # Pull latest images
          echo "Pulling latest images..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/datn-backend:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/datn-frontend:latest

          # Remove old images to save space
          echo "Cleaning up old images..."
          docker image prune -f

          # Start services
          echo "Starting services..."
          docker-compose -f docker-compose.prod.yml up -d

          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c 'until docker-compose -f docker-compose.prod.yml ps | grep -q "healthy"; do sleep 5; done' || true

          # Show status
          echo "Deployment status:"
          docker-compose -f docker-compose.prod.yml ps

          echo "Deployment completed!"
          EOF

          chmod +x deploy.sh

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.prod.yml,deploy.sh"
          target: "~/datn-deployment/"

      - name: Create environment files on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/datn-deployment
            
            # Create backend environment file
            echo "${{ secrets.BACKEND_ENV }}" > .env
            
            # Create data directory for backend
            mkdir -p backend_data

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/datn-deployment
            
            # Make sure Docker and Docker Compose are available
            if ! command -v docker &> /dev/null; then
                echo "Docker is not installed. Please install Docker first."
                exit 1
            fi
            
            if ! command -v docker-compose &> /dev/null; then
                echo "Docker Compose is not installed. Please install Docker Compose first."
                exit 1
            fi
            
            # Run deployment script
            ./deploy.sh

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/datn-deployment
            
            # Check if containers are running
            echo "=== Container Status ==="
            docker-compose -f docker-compose.prod.yml ps
            
            # Check logs for any errors
            echo "=== Recent Backend Logs ==="
            docker-compose -f docker-compose.prod.yml logs --tail=20 backend
            
            echo "=== Recent Frontend Logs ==="
            docker-compose -f docker-compose.prod.yml logs --tail=20 frontend
            
            # Test API endpoints
            echo "=== Testing API Health ==="
            sleep 10
            curl -f http://localhost:8000/health || echo "Backend health check failed"
            curl -f http://localhost:3000 || echo "Frontend health check failed"
