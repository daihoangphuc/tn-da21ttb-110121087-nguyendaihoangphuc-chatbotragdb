name: Simple CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - staging  

env:
  REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Setup
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set environment variables
        id: env
        run: |
          # Đơn giản hóa logic environment
          case "${{ github.ref_name }}" in
            "main")
              echo "env=production" >> $GITHUB_OUTPUT
              echo "tag=latest" >> $GITHUB_OUTPUT
              echo "domain=phucndh.me" >> $GITHUB_OUTPUT
              echo "api_url=https://api.phucndh.me/api" >> $GITHUB_OUTPUT
              echo "frontend_url=https://chat.phucndh.me" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "env=staging" >> $GITHUB_OUTPUT  
              echo "tag=staging" >> $GITHUB_OUTPUT
              echo "domain=staging.phucndh.me" >> $GITHUB_OUTPUT
              echo "api_url=https://staging.api.phucndh.me/api" >> $GITHUB_OUTPUT
              echo "frontend_url=https://staging.chat.phucndh.me" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "env=development" >> $GITHUB_OUTPUT
              echo "tag=dev" >> $GITHUB_OUTPUT
              echo "domain=${{ secrets.VPS_HOST }}" >> $GITHUB_OUTPUT
              echo "api_url=http://${{ secrets.VPS_HOST }}:8000/api" >> $GITHUB_OUTPUT
              echo "frontend_url=http://${{ secrets.VPS_HOST }}:3000" >> $GITHUB_OUTPUT
              ;;
          esac
          echo "sha_short=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 2. Build Backend
      - name: Create backend env
        run: |
          echo "${{ secrets.BACKEND_ENV }}" > .env.backend
          echo "FRONTEND_URL=${{ steps.env.outputs.frontend_url }}" >> .env.backend
          echo "CORS_ORIGINS=${{ steps.env.outputs.frontend_url }}" >> .env.backend

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Dockerfile.backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/db-rag-backend:${{ steps.env.outputs.tag }}
            ${{ env.REGISTRY }}/db-rag-backend:${{ steps.env.outputs.sha_short }}
          build-args: ENV_FILE=.env.backend
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 3. Build Frontend  
      - name: Create frontend env
        run: |
          echo "${{ secrets.FRONTEND_ENV }}" > .env.frontend
          echo "NEXT_PUBLIC_API_URL=${{ steps.env.outputs.api_url }}" >> .env.frontend

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Dockerfile.frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/db-rag-frontend:${{ steps.env.outputs.tag }}
            ${{ env.REGISTRY }}/db-rag-frontend:${{ steps.env.outputs.sha_short }}
          build-args: |
            ENV_FILE=.env.frontend
            NEXT_PUBLIC_API_URL=${{ steps.env.outputs.api_url }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 4. Deploy
      - name: Create deployment package
        run: |
          # Create deployment env file
          cat > .env << EOF
          ${{ secrets.BACKEND_ENV }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          TAG=${{ steps.env.outputs.tag }}
          FRONTEND_URL=${{ steps.env.outputs.frontend_url }}
          CORS_ORIGINS=${{ steps.env.outputs.frontend_url }}
          NEXT_PUBLIC_API_URL=${{ steps.env.outputs.api_url }}
          EOF
          
          # Copy docker-compose
          cp src/docker-compose.yml ./
          
          # Create nginx configs only for production/staging
          if [[ "${{ steps.env.outputs.env }}" != "development" ]]; then
            # Backend nginx config
            cat > nginx-backend.conf << EOF
          server {
              listen 80;
              server_name api.${{ steps.env.outputs.domain }};
              location / {
                  return 301 https://\$host\$request_uri;
              }
          }
          
          server {
              listen 443 ssl;
              server_name api.${{ steps.env.outputs.domain }};
              
              ssl_certificate /etc/letsencrypt/live/api.${{ steps.env.outputs.domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/api.${{ steps.env.outputs.domain }}/privkey.pem;
              
              location / {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF
          
            # Frontend nginx config
            cat > nginx-frontend.conf << EOF
          server {
              listen 80;
              server_name chat.${{ steps.env.outputs.domain }};
              location / {
                  return 301 https://\$host\$request_uri;
              }
          }
          
          server {
              listen 443 ssl;
              server_name chat.${{ steps.env.outputs.domain }};
              
              ssl_certificate /etc/letsencrypt/live/chat.${{ steps.env.outputs.domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/chat.${{ steps.env.outputs.domain }}/privkey.pem;
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF
          fi

      - name: Deploy to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml,.env,nginx-*.conf"
          target: "~/app"

      - name: Run deployment on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/app
            
            # Setup nginx and SSL for production/staging only
            if [[ -f nginx-backend.conf ]]; then
              # Install nginx if not exists
              if ! command -v nginx &> /dev/null; then
                  sudo apt update && sudo apt install -y nginx
              fi
              
              # Install certbot if not exists
              if ! command -v certbot &> /dev/null; then
                  sudo apt update && sudo apt install -y certbot python3-certbot-nginx
              fi
              
              # Configure nginx
              sudo cp nginx-backend.conf /etc/nginx/sites-available/api.${{ steps.env.outputs.domain }}
              sudo cp nginx-frontend.conf /etc/nginx/sites-available/chat.${{ steps.env.outputs.domain }}
              sudo ln -sf /etc/nginx/sites-available/api.${{ steps.env.outputs.domain }} /etc/nginx/sites-enabled/
              sudo ln -sf /etc/nginx/sites-available/chat.${{ steps.env.outputs.domain }} /etc/nginx/sites-enabled/
              
              # Test nginx config
              sudo nginx -t
              
              # Create SSL certificates if not exist
              if [[ ! -d /etc/letsencrypt/live/api.${{ steps.env.outputs.domain }} ]]; then
                  sudo certbot --nginx -d api.${{ steps.env.outputs.domain }} --non-interactive --agree-tos -m admin@${{ steps.env.outputs.domain }}
              fi
              
              if [[ ! -d /etc/letsencrypt/live/chat.${{ steps.env.outputs.domain }} ]]; then
                  sudo certbot --nginx -d chat.${{ steps.env.outputs.domain }} --non-interactive --agree-tos -m admin@${{ steps.env.outputs.domain }}
              fi
              
              # Restart nginx
              sudo systemctl restart nginx
            fi
            
            # Deploy application
            echo "🚀 Deploying application..."
            docker compose down
            
            # Clean old images
            docker rmi $(docker images | grep "db-rag" | awk '{print $3}') -f 2>/dev/null || true
            
            # Pull and start new images
            docker compose pull
            docker compose up -d --remove-orphans
            
            # Wait for services
            echo "⏳ Waiting for services to start..."
            sleep 20
            
            # Health check
            echo "🔍 Checking service health..."
            if curl -f http://localhost:8000/health >/dev/null 2>&1; then
                echo "✅ Backend is healthy"
            else
                echo "❌ Backend health check failed"
            fi
            
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
                echo "✅ Frontend is healthy"
            else
                echo "❌ Frontend health check failed"
            fi
            
            # Cleanup
            docker image prune -f
            docker system prune -f --filter "until=24h"
            
            echo "🎉 Deployment completed successfully!"
            echo "📊 Environment: ${{ steps.env.outputs.env }}"
            echo "🏷️  Tag: ${{ steps.env.outputs.tag }}"
            echo "🌐 Frontend: ${{ steps.env.outputs.frontend_url }}"
            echo "🔗 API: ${{ steps.env.outputs.api_url }}"
