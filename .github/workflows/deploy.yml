name: CI/CD Pipeline

on:
  push:
    branches:
      - test/cicd_v2

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=production" >> $GITHUB_OUTPUT
            echo "TAG=latest" >> $GITHUB_OUTPUT
            echo "FRONTEND_DOMAIN=https://chat.phucndh.me" >> $GITHUB_OUTPUT
            echo "BACKEND_DOMAIN=https://api.phucndh.me" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENV=staging" >> $GITHUB_OUTPUT
            echo "TAG=staging" >> $GITHUB_OUTPUT
            echo "FRONTEND_DOMAIN=https://staging.chat.phucndh.me" >> $GITHUB_OUTPUT
            echo "BACKEND_DOMAIN=https://staging.api.phucndh.me" >> $GITHUB_OUTPUT
          else
            echo "ENV=development" >> $GITHUB_OUTPUT
            echo "TAG=dev" >> $GITHUB_OUTPUT
            echo "FRONTEND_DOMAIN=http://${{ secrets.VPS_HOST }}:3000" >> $GITHUB_OUTPUT
            echo "BACKEND_DOMAIN=http://${{ secrets.VPS_HOST }}:8000" >> $GITHUB_OUTPUT
          fi
          echo "SHA_SHORT=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare backend env file
        if: matrix.service == 'backend'
        run: |
          echo "${{ secrets.BACKEND_ENV }}" > .env.backend
          echo "FRONTEND_URL=${{ steps.vars.outputs.FRONTEND_DOMAIN }}" >> .env.backend

      - name: Prepare frontend env file
        if: matrix.service == 'frontend'
        run: |
          echo "${{ secrets.FRONTEND_ENV }}" > .env.frontend
          echo "NEXT_PUBLIC_API_URL=${{ steps.vars.outputs.BACKEND_DOMAIN }}" >> .env.frontend

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/db-rag-${{ matrix.service }}:${{ steps.vars.outputs.TAG }}
            ${{ secrets.DOCKERHUB_USERNAME }}/db-rag-${{ matrix.service }}:${{ steps.vars.outputs.SHA_SHORT }}
          build-args: |
            ENV_FILE=.env.${{ matrix.service }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-push
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=production" >> $GITHUB_OUTPUT
            echo "TAG=latest" >> $GITHUB_OUTPUT
            echo "FRONTEND_DOMAIN=https://chat.phucndh.me" >> $GITHUB_OUTPUT
            echo "BACKEND_DOMAIN=https://api.phucndh.me" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENV=staging" >> $GITHUB_OUTPUT
            echo "TAG=staging" >> $GITHUB_OUTPUT
            echo "FRONTEND_DOMAIN=https://staging.chat.phucndh.me" >> $GITHUB_OUTPUT
            echo "BACKEND_DOMAIN=https://staging.api.phucndh.me" >> $GITHUB_OUTPUT
          else
            echo "ENV=development" >> $GITHUB_OUTPUT
            echo "TAG=dev" >> $GITHUB_OUTPUT
            echo "FRONTEND_DOMAIN=http://${{ secrets.VPS_HOST }}:3000" >> $GITHUB_OUTPUT
            echo "BACKEND_DOMAIN=http://${{ secrets.VPS_HOST }}:8000" >> $GITHUB_OUTPUT
          fi
          echo "SHA_SHORT=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Create .env file
        run: |
          echo "${{ secrets.BACKEND_ENV }}" > .env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "TAG=${{ steps.vars.outputs.TAG }}" >> .env
          echo "FRONTEND_URL=${{ steps.vars.outputs.FRONTEND_DOMAIN }}" >> .env

      - name: Create docker-compose override
        run: |
          cat > docker-compose.override.yml << EOF
          version: '3'
          services:
            backend:
              image: \${DOCKERHUB_USERNAME}/db-rag-backend:\${TAG}
              environment:
                - FRONTEND_URL=${{ steps.vars.outputs.FRONTEND_DOMAIN }}
            frontend:
              image: \${DOCKERHUB_USERNAME}/db-rag-frontend:\${TAG}
              environment:
                - NEXT_PUBLIC_API_URL=${{ steps.vars.outputs.BACKEND_DOMAIN }}
          EOF

      - name: Create nginx config for backend
        run: |
          cat > nginx-backend.conf << EOF
          server {
              listen 80;
              server_name api.phucndh.me;
              
              location / {
                  return 301 https://\$host\$request_uri;
              }
          }
          
          server {
              listen 443 ssl;
              server_name api.phucndh.me;
              
              ssl_certificate /etc/letsencrypt/live/api.phucndh.me/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/api.phucndh.me/privkey.pem;
              
              location / {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF
          
          cat > nginx-frontend.conf << EOF
          server {
              listen 80;
              server_name chat.phucndh.me;
              
              location / {
                  return 301 https://\$host\$request_uri;
              }
          }
          
          server {
              listen 443 ssl;
              server_name chat.phucndh.me;
              
              ssl_certificate /etc/letsencrypt/live/chat.phucndh.me/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/chat.phucndh.me/privkey.pem;
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml,docker-compose.override.yml,.env,nginx-backend.conf,nginx-frontend.conf"
          target: "~/app"

      - name: Deploy on VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/app
            
            # Kiểm tra và cài đặt Nginx nếu chưa có
            if ! command -v nginx &> /dev/null; then
                sudo apt update
                sudo apt install -y nginx
            fi
            
            # Kiểm tra và cài đặt Certbot nếu chưa có
            if ! command -v certbot &> /dev/null; then
                sudo apt update
                sudo apt install -y certbot python3-certbot-nginx
            fi
            
            # Cấu hình Nginx
            sudo cp nginx-backend.conf /etc/nginx/sites-available/api.phucndh.me
            sudo cp nginx-frontend.conf /etc/nginx/sites-available/chat.phucndh.me
            
            # Tạo symbolic link nếu chưa tồn tại
            if [ ! -f /etc/nginx/sites-enabled/api.phucndh.me ]; then
                sudo ln -s /etc/nginx/sites-available/api.phucndh.me /etc/nginx/sites-enabled/
            fi
            
            if [ ! -f /etc/nginx/sites-enabled/chat.phucndh.me ]; then
                sudo ln -s /etc/nginx/sites-available/chat.phucndh.me /etc/nginx/sites-enabled/
            fi
            
            # Kiểm tra cấu hình Nginx
            sudo nginx -t
            
            # Tạo SSL certificate nếu chưa tồn tại
            if [ ! -d /etc/letsencrypt/live/api.phucndh.me ]; then
                sudo certbot --nginx -d api.phucndh.me --non-interactive --agree-tos -m admin@phucndh.me
            fi
            
            if [ ! -d /etc/letsencrypt/live/chat.phucndh.me ]; then
                sudo certbot --nginx -d chat.phucndh.me --non-interactive --agree-tos -m admin@phucndh.me
            fi
            
            # Khởi động lại Nginx
            sudo systemctl restart nginx
            
            # Deploy ứng dụng
            docker compose pull
            docker compose down
            docker compose up -d --remove-orphans
            
            # Xóa các images không có tag (dangling images)
            docker image prune -f
            
            # Xóa cụ thể các images có tag <none>
            docker images | grep "<none>" | awk '{print $3}' | xargs -r docker rmi -f
            
            # Xóa các container không sử dụng và các network không sử dụng
            docker system prune -f --filter "until=24h"
